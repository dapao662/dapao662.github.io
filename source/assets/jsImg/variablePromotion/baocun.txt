import React, { useState, useEffect } from 'react';
import { Badge, Modal, Space, Switch, Form, Input, Select, Drawer, Button, Table, message, Popconfirm, Tooltip, Timeline, Typography, Checkbox } from 'antd';
import { connect } from 'umi';
import { FileTextOutlined, UnorderedListOutlined, MailOutlined, MessageOutlined, ExclamationCircleOutlined, SnippetsOutlined, LockOutlined, EyeOutlined, SmileOutlined } from '@ant-design/icons';
import * as faultServices from '@/services/faultDetail/faultScheduling';
import moment from 'moment';

const { confirm } = Modal;
const { TextArea } = Input;

const buttonStyle = {
  padding: 0,
};
const IconStyle = {
  color: '#44abe5',
  fontSize: '20px',
  marginTop: '2px',
};

const StatusIcon = [
  <Tooltip title="调度"><LockOutlined /></Tooltip>,
  <Tooltip title="验证"><EyeOutlined /></Tooltip>,
  <Tooltip title="分析与跟踪"><SmileOutlined /></Tooltip>,
]

const App = (props) => {
  const { faultScheduling, dispatch, faultFindM } = props;
  const [sameResonform] = Form.useForm();
  const [keyFaultform] = Form.useForm();
  const [SameResonCheck, setSameResonCheck] = useState(false);
  // const [KeyFaultCheck, setKeyFaultCheck] = useState(false);
  const [loading, setloading] = useState(false);

  const [ShowMsgModal, setShowMsgModal] = useState({
    title: '',
    visible: false,
  });
  const [msgTableData, setmsgTableData] = useState([])
  const [totalCountFlag, setTotalCountFlag] = useState(false)
  const [totalCountTableData, setTotalCountTableData] = useState([]);

  const [scheduleAndMsgVisible, setScheduleAndMsgVisible] = useState(false);
  const [scheduleAndMsgData, setScheduleAndMsgData] = useState([]);
  // 全选
  const allItem = faultScheduling.scheduleAndMsgList;
  const [indeterminate, setIndeterminate] = useState(false);
  const [checkAll, setCheckAll] = useState(false);

  const getAllStatus = () => {
    if (dispatch) {
      dispatch({
        type: 'faultScheduling/getAllDispatchFlag',
        payload: props.faultId
      })
    }
  }

  const getDispatchRecords = () => {
    if (dispatch) {
      dispatch({
        type: 'faultScheduling/getDispatchRecords',
        payload: props.faultId,
      });
    }
  }

  /**
   * 显示进度更新修改框
   */
  const showFormModal = () => {
    if (dispatch) {
      dispatch({
        type: 'faultScheduling/setShowFormModalInfo',
        payload: {
          visiable: true,
          title: '进度更新',
          changeSameReson: true,
        },
      });
    }
  };

  const getHeader = () => {
    if (dispatch) {
      dispatch({
        type: 'faultFindM/getHeader',
        payload: props.faultId,
      })
    }
  }

  const saveSameReson = () => {
    setloading(true);
    sameResonform
      .validateFields()
      .then(async (values) => {
        const res = await faultServices.setSameReasonFault(`faultId=${props.faultId}&sameReasonCore=1&sameReasonFaultNumber=${values.sameReasonFaultNumber}`)
        if ((res.code || '') === '200') {
          message.success('修改成功');
          getAllStatus();
          getDispatchRecords();
          setloading(false);
          setSameResonCheck(false);
          getHeader();
        } else {
          setloading(false);
          message.error(res.msg || '接口请求错误')
        }
      })
      .catch((info) => { });
  };

  const confirmSameReson = async () => {
    const res = await faultServices.cancelSameReasonFault(`faultId=${props.faultId}&sameReasonCore=0`);
    if ((res.code || '') === '200') {
      message.success('修改成功');
      getAllStatus();
      getDispatchRecords();
      getHeader();
    } else {
      message.error(res.msg || '接口请求错误')
    }
  }

  const changeSameReson = () => {
    if (!faultScheduling.isSameReson) {
      setSameResonCheck(true);
    } else {
      // showFormModal();
      confirm({
        title: '确定取消同原因?',
        icon: <ExclamationCircleOutlined />,
        content: '确定取消该故障同原因状态？',
        onOk() {
          confirmSameReson();
        },
        onCancel() {
        },
      })
    }
  };

  const getFindCore = () => {
    if (dispatch) {
      dispatch({
        type: 'faultFindM/getFind',
        payload: props.faultId
      })
    }
  }

  const inputKeyFaultCore = async (core, mark) => {
    let str = '';
    if (mark.length > 0) {
      mark.map(item => {
        str += item + ';';
      })
      str = str.substr(0, str.length - 1);
    } else {
      return;
    }
    const res = await faultServices.updateFaultCore(`faultId=${props.faultId}&faultCore=${core}&faultMark=${str}`)
    if ((res.code || '') === '200') {
      message.success('修改成功');
      dispatch({
        type: 'faultScheduling/changeFaultTag',
        payload: false
      })
      getAllStatus();
      getFindCore();
    } else {
      message.error(res.msg || '接口请求失败')
    }
  }
  const cancelFaultTag = () => {
    if (dispatch) {
      dispatch({
        type: 'faultScheduling/changeFaultTag',
        payload: false
      })
    }
  }

  const saveKeyFault = () => {
    keyFaultform
      .validateFields()
      .then((values) => {
        inputKeyFaultCore(1, values.faultMark);
      })
      .catch((info) => { });
  };

  useEffect(() => {
    if (faultScheduling.faultTag) {
      if (faultFindM.faultFindInfo) {
        let data = faultFindM.faultFindInfo.faultMark;
        if (data && data !== 'null' && data !== null && data !== '') {
          let arr = data.split(';');
          keyFaultform.setFieldsValue({
            faultMark: arr
          })
        } else {
          return;
        }
      } else {
        return;
      }
    }
  }, [faultScheduling.faultTag])

  const ShowMsg = async (title) => {
    setShowMsgModal({ title, visible: true });
    const res = await faultServices.getMessageOrWeChatRecords(`faultId=${props.faultId}&type=${title === '短信' ? 0 : 1}`)
    if ((res.code || '') === '200') {
      setmsgTableData(res.data);
    } else {
      setmsgTableData([]);
    }
  };
  const showTotalCountDrawer = async () => {
    setTotalCountFlag(true)
    const res = await faultServices.getTotalcoutData(props.faultId)
    if ((res.code || '') === '200') {
      setTotalCountTableData(res.data)
    } else {
      setTotalCountTableData([])
    }
  }
  //跳转至派单详情页
  const showFaultList = (orderSn) => {
    if (dispatch) {
      dispatch({
        type: 'faultScheduling/setFaultListModel',
        payload: true,
      })
    }
    if (dispatch) {
      dispatch({
        type: 'faultScheduling/orderDetail',
        payload: `orderSn=${orderSn}`,
      })
    }
  }
  const columnsTotal = [
    {
      title: '单号', dataIndex: 'orderSn', key: 'orderSn', render: (text) => {
        return <a onClick={() => showFaultList(text)}>{text}</a>
      }
    },
    { title: '时间', dataIndex: 'operateTime', key: 'operateTime', render: (text) => moment(text).format('YYYY-MM-DD HH:mm:ss') },
    { title: '类型', dataIndex: 'orderTypeVal', key: 'orderTypeVal' },
    { title: '状态', dataIndex: 'orderStatusVal', key: 'orderStatusVal' },
    { title: '处理人', dataIndex: 'handlerName', key: 'handlerName' },
    { title: '是否超时', dataIndex: 'overLimit', key: 'overLimit', render: (text) => text ? '是' : '否' },
  ]
  const columnsWechat = [
    { title: '时间', dataIndex: 'operateTime', key: 'operateTime', render: (text) => moment(text).format('YYYY-MM-DD HH:mm:ss'), width: 110 },
    { title: '收件人', dataIndex: 'connect', key: 'connect', width: 200, render: (text) => <div style={{ width: '200px', wordBreak: 'break-word' }}>{text}</div> },
    { title: '微信内容', dataIndex: 'content', key: 'content' },
    { title: '操作人', dataIndex: 'operator', key: 'operator', width: 90 },
  ];
  const columnsMsg = [
    { title: '时间', dataIndex: 'operateTime', key: 'operateTime', render: (text) => moment(text).format('YYYY-MM-DD HH:mm:ss'), width: 110 },
    // { title: '收件人', dataIndex: 'connect', key: 'connect', width: 200, render: (text) => <div style={{ width: '200px', wordBreak: 'break-word' }}>{text}</div> },
    {
      title: '收件人', dataIndex: 'connect', key: 'connect', width: 200,
      render: (text) =>
        <div style={{ width: '200px', wordBreak: 'break-word' }}>
          {
            text.length > 180 ? <TextArea rows={8} value={text} />
              : text
          }
        </div>
    },
    { title: '短信内容', dataIndex: 'content', key: 'content' },
    { title: '操作人', dataIndex: 'operator', key: 'operator', width: 90 },
    { title: '类别', dataIndex: 'messageType', key: 'messageType', width: 90, render: (text) => <div>{text ? '内部' : '外部'}</div> },
  ];

  useEffect(() => {
    getAllStatus();
  }, []);

  //故障标签下拉列表
  const getFaultCore = () => {
    if (dispatch) {
      dispatch({
        type: 'faultScheduling/getFaultCore'
      })
    }
  }
  useEffect(() => {
    if (faultScheduling.faultTag) {
      getFaultCore();
    }
  }, [faultScheduling.faultTag])


  //故障调度记录与日志记录
  const scheduleAndMsg = (params) => {
    setScheduleAndMsgVisible(params);
  }
  //提交保存
  const scheduleAndMsgSubmit = () => {
    console.log(scheduleAndMsgData);
    dispatch({
      type: 'faultScheduling/saveScheduleAndMsg',
    })
    setScheduleAndMsgVisible(false);
  }
  //多选框选中
  const boxOnChange = (e) => {
    setScheduleAndMsgData(e);
    setIndeterminate(!!e.length && e.length < allItem.length);
    setCheckAll(e.length === allItem.length);
  }
  //全选
  const onCheckAllChange = e => {
    setScheduleAndMsgData(e.target.checked ? allItem : []);
    setIndeterminate(false);
    setCheckAll(e.target.checked);
  };

  useEffect(() => {
      if (dispatch) {
        dispatch({
          type: 'faultScheduling/getSchedleAndMsgList',
        })
        setCheckAll(true);
        setScheduleAndMsgData(faultScheduling.scheduleAndMsgList);
      }
  }, [scheduleAndMsgVisible])

  return (
    <>
      <Space size="middle" onClick={(e) => e.stopPropagation()}>
        <Tooltip title="故障调度记录与日志记录">
          <Badge size="small">
            <Button type="link" style={buttonStyle} onClick={() => scheduleAndMsg(true)}>
              <SnippetsOutlined style={IconStyle} />
            </Button>
          </Badge>
        </Tooltip>
        <>
          同原因：
          <Switch
            checked={faultScheduling.isSameReson !== 0}
            checkedChildren="是"
            unCheckedChildren="否"
            onClick={changeSameReson}
            style={{ marginLeft: -16 }}
          />
        </>
        <Badge count={faultScheduling.totalCount} size="small">
          <Button type="link" style={buttonStyle} onClick={() => showTotalCountDrawer()}>
            <UnorderedListOutlined style={IconStyle} />
          </Button>
        </Badge>
        <Badge count={faultScheduling.messageCount} size="small">
          <Button type="link" style={buttonStyle} onClick={() => ShowMsg('短信')}>
            <MailOutlined style={IconStyle} />
          </Button>
        </Badge>
        <Badge count={faultScheduling.wechatCount} size="small">
          <Button type="link" style={buttonStyle} onClick={() => ShowMsg('微信')}>
            <MessageOutlined style={IconStyle} />
          </Button>
        </Badge>
      </Space>
      <div onClick={(e) => e.stopPropagation()}>
        <Modal
          key="isSameResonModal"
          title="同原因"
          visible={SameResonCheck}
          onOk={saveSameReson}
          onCancel={() => setSameResonCheck(false)}
          confirmLoading={loading}
          afterClose={() => { sameResonform.resetFields() }}
          destroyOnClose
        >
          <Form form={sameResonform} name="SameResonForm">
            <Form.Item
              label="故障单号"
              name="sameReasonFaultNumber"
              rules={[{ required: true, message: '主故障单号不得为空！' }]}
            >
              <Input />
            </Form.Item>
          </Form>
        </Modal>
      </div>
      <div onClick={(e) => e.stopPropagation()}>
        <Modal
          key="isKeyFaultModal"
          title="故障标签"
          visible={faultScheduling.faultTag}
          onOk={saveKeyFault}
          onCancel={cancelFaultTag}
          afterClose={() => { keyFaultform.resetFields() }}
          confirmLoading={loading}
          destroyOnClose
        >
          <Form form={keyFaultform} name="KeyFaultForm">
            <Form.Item
              label="故障标签"
              name="faultMark"
              rules={[{ required: true, message: '故障标签不得为空！' }]}
            >
              <Select mode="multiple" allowClear>
                {
                  (faultScheduling.faultCoreData && faultScheduling.faultCoreData.length > 0) && faultScheduling.faultCoreData.map(item => {
                    return (
                      <Select.Option key={item.id} value={item.content}>{item.content}</Select.Option>
                    )
                  })
                }
              </Select>
            </Form.Item>
          </Form>
        </Modal>
      </div>
      <div onClick={(e) => e.stopPropagation()}>
        <Drawer
          key={`${ShowMsgModal.title}发送记录`}
          title={`${ShowMsgModal.title}发送记录`}
          visible={ShowMsgModal.visible}
          onClose={() => setShowMsgModal({ title: '', visible: false })}
          width={850}
        >
          <Table
            rowKey="id"
            pagination
            dataSource={msgTableData}
            columns={ShowMsgModal.title === '微信' ? columnsWechat : columnsMsg}
          />
        </Drawer>
      </div>
      <div onClick={(e) => e.stopPropagation()}>
        <Drawer
          key={props.faultId}
          style={{ zIndex: 666 }}
          title="任务单汇总信息" visible={totalCountFlag} width={850}
          onClose={() => { setTotalCountFlag(false) }}
          footer={
            <div style={{ float: 'right' }}>
              <Button onClick={() => { setTotalCountFlag(false) }}>取消</Button>
            </div>
          }
        >
          <Table
            pagination={false}
            rowKey={(row) => row.faultId}
            dataSource={totalCountTableData}
            columns={columnsTotal}
          />
        </Drawer>
      </div>
      <div onClick={(e) => e.stopPropagation()}>
        <Drawer
          key={props.faultId}
          title="故障调度记录与日志记录"
          width="40%"
          visible={scheduleAndMsgVisible}
          onClose={() => scheduleAndMsg(false)}
          footer={
            <div style={{ float: 'right' }}>
              <Button onClick={() => scheduleAndMsg(false)}>取消</Button>
              <Button type="primary" style={{ marginLeft: 5 }} onClick={scheduleAndMsgSubmit}>提交</Button>
            </div>
          }
        >
          <>
            {
              (faultScheduling.scheduleAndMsgData.length > 0) ?
                <Checkbox style={{ marginBottom: 10, marginLeft: 25 }} indeterminate={indeterminate} onChange={onCheckAllChange} checked={checkAll}>全选</Checkbox>
                : ''
            }
            <Timeline mode="left" style={{ fontSize: 20 }}>
              <Checkbox.Group value={scheduleAndMsgData} onChange={boxOnChange}>
                {
                  faultScheduling.scheduleAndMsgData.length > 0 && faultScheduling.scheduleAndMsgData.map((item, index)=> {
                    return (
                      <Timeline.Item
                        key={item.id}
                        dot={StatusIcon[item.type]}
                      >
                        <div>
                          <Checkbox style={{ marginRight: 5 }} key={index} value={item.id}></Checkbox>
                          <Typography.Text>{item.startTime ? moment(item.startTime).format('YYYY-MM-DD HH:mm') : ''}</Typography.Text>
                          <Typography.Text strong>{`---${item.msg}`}</Typography.Text>
                        </div>
                      </Timeline.Item>
                    )
                  })
                }
              </Checkbox.Group>
            </Timeline>
          </>
        </Drawer>
      </div>
    </>
  );
};

export default connect(({ faultScheduling, faultFindM }) => ({
  faultScheduling, faultFindM
}))(App);
